{"version":3,"sources":["components/PokemonDetails.js","components/MyPokemonList.js","components/PokemonList.js","components/Navigation.js","App.js","index.js"],"names":["PokemonDetails","props","toPokemonList","history","push","createLocalData","localdata","parseData","JSON","parse","nickname","name","isMyList","myListId","localStorage","setItem","stringify","createNicknameCache","detailData","gqlVariables","state","getLocalData","url","header","credentials","headers","body","query","variables","method","fetch","then","res","json","result","setState","isLoaded","items","data","pokemon","value","error","catchPokemon","rand","Math","floor","random","isDetail","isGatcha","console","log","addToMyList","alert","req","id","storeData","xdata","date","Date","setId","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","vdata","forId","set","dbname","catch","err","deleteData","status","del","removeItem","backData","editable","isEditable","createStore","getItem","location","customName","handleChange","bind","handleSubmit","this","event","target","preventDefault","btnCatch","btnLetItGo","btnAddToMyList","btnRelease","input","onClick","className","type","placeholder","disabled","to","pathname","onChange","message","src","sprites","front_default","alt","types","length","map","i","abilities","ability","moves","move","Component","MyPokemonList","myPokemonList","values","customStore","PokemonList","getMyPokemon","myList","fetchData","x","undefined","y","limit","offset","pokemons","results","image","count","previous","Navigation","App","clickBody","document","getElementById","path","component","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.2e2efcc1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport { createStore,set, update, del, entries  } from 'idb-keyval';\r\n\r\nclass PokemonDetails extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      var dbname = createStore('my-list-db', 'my-pokemon-list');\r\n\r\n      if('localdata' in localStorage){\r\n          var getLocalData = JSON.parse(localStorage.getItem('localdata'));\r\n      } else {\r\n        var localdata = {\r\n          nickname:this.props.location.state.nickname,\r\n          name:this.props.location.state.name,\r\n          isMyList:this.props.location.state.isMyList,\r\n          myListId:this.props.location.state.myListId,\r\n        };\r\n        localStorage.setItem('localdata', JSON.stringify(localdata));\r\n        var getLocalData = JSON.parse(localStorage.getItem('localdata'));\r\n      }\r\n\r\n      this.state = {\r\n        error:null,\r\n        isLoaded:false,\r\n        items:[],\r\n        getLocalData:getLocalData,\r\n        dbname:dbname,\r\n        random:0,\r\n        customName:null,\r\n        value:null,\r\n        isDetail:null,\r\n        isGatcha:null,\r\n        isEditable:null,\r\n      }\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n      this.detailData();\r\n  }\r\n\r\n  toPokemonList = () =>{\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  createLocalData = (localdata) =>{\r\n    var parseData = JSON.parse(localdata);\r\n    var localdata = {\r\n      nickname: parseData.nickname,\r\n      name:parseData.name,\r\n      isMyList:parseData.isMyList,\r\n      myListId:parseData.myListId\r\n    };\r\n    localStorage.setItem('localdata', JSON.stringify(localdata));\r\n  }\r\n\r\n  createNicknameCache = (nickname) => {\r\n    localStorage.setItem(nickname, \"This data exist\");\r\n  }\r\n\r\n  //view data\r\n  detailData = () => {\r\n\r\n    const gqlQuery = `query pokemons($name: String!) {\r\n          pokemon(name: $name) {\r\n            id\r\n            name\r\n            location_area_encounters\r\n            sprites{\r\n              back_default\r\n              front_default\r\n            }\r\n            abilities {\r\n              ability {\r\n                name\r\n              }\r\n            }\r\n            moves {\r\n              move {\r\n                name\r\n              }\r\n            }\r\n            types {\r\n              type {\r\n                name\r\n              }\r\n            }\r\n            message\r\n            status\r\n          }\r\n        }`;\r\n\r\n    // if(this.props.location.state !== null){\r\n    //   var localdata = {\r\n    //     nickname:this.props.location.state.nickname,\r\n    //     name:this.props.location.state.name,\r\n    //     isEditable:this.props.location.state.isEditable,\r\n    //     isMyList:this.props.location.state.isMyList,\r\n    //     myListId:this.props.location.state.myListId,\r\n    //   }\r\n    // }\r\n    // this.createLocalData(JSON.stringify(localdata));\r\n\r\n    const gqlVariables = { name: this.state.getLocalData.name,};\r\n    var url = \"https://graphql-pokeapi.vercel.app/api/graphql\";\r\n    var header = {\r\n      credentials: 'omit',\r\n      headers:{ 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        query: gqlQuery,\r\n        variables: gqlVariables,\r\n      }),\r\n      method: 'POST',\r\n    };\r\n\r\n    if(this.state.getLocalData.isMyList == 1){\r\n      fetch(url,header)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n                isLoaded:true,\r\n                items:result.data.pokemon,\r\n                value:this.state.getLocalData.nickname\r\n            });\r\n          },\r\n          (error)=>{\r\n              this.setState({\r\n                  isLoaded:true,\r\n                  error\r\n              });\r\n          }\r\n        )\r\n    }else{\r\n      fetch(url,header)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n                isLoaded:true,\r\n                items:result.data.pokemon,\r\n                value:result.data.pokemon.name\r\n            });\r\n          },\r\n          (error)=>{\r\n              this.setState({\r\n                  isLoaded:true,\r\n                  error\r\n              });\r\n          }\r\n        )\r\n    }\r\n\r\n  }\r\n\r\n  catchPokemon = () => {\r\n\r\n    const rand = Math.floor(Math.random()*100);\r\n    this.setState({ random: this.state.random + rand });\r\n\r\n    if(rand % 2 == 0){\r\n      this.setState({isDetail: 1,isGatcha:1});\r\n      var localdata = {\r\n        nickname:this.state.items.name,\r\n        name:this.state.items.name,\r\n        isMyList:null,\r\n        myListId:null,\r\n      }\r\n      this.createLocalData(JSON.stringify(localdata));\r\n      console.log(rand + ' GATCHA');\r\n    }else{\r\n      this.setState({isDetail: 2,isGatcha:null});\r\n      var localdata = {\r\n        nickname:this.state.items.name,\r\n        name:this.state.items.name,\r\n        isMyList:null,\r\n        myListId:null,\r\n      }\r\n      this.createLocalData(JSON.stringify(localdata));\r\n      console.log(this.state.random + ' RUN AWAY');\r\n    }\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event){\r\n\r\n    if(this.state.value in localStorage){\r\n      if(this.state.isEditable == 1){\r\n          alert('This nickname exist')\r\n         console.log('This nickname exist')\r\n      }\r\n\r\n    } else {\r\n\r\n      localStorage.removeItem(this.state.getLocalData.nickname);\r\n\r\n      var localdata = {\r\n        nickname:this.state.value,\r\n        name:this.state.getLocalData.name,\r\n        isMyList:null,\r\n        myListId:this.state.getLocalData.myListId,\r\n      }\r\n      this.createLocalData(JSON.stringify(localdata));\r\n\r\n      alert('Nickname '+ this.state.value +' Updated');\r\n      event.preventDefault();\r\n\r\n      if(this.state.getLocalData.isMyList == 1){\r\n        var req = {\r\n          isMyList:1,\r\n          id:this.state.getLocalData.myListId,\r\n          nickname:this.state.value\r\n        }\r\n        this.storeData(JSON.stringify(req));\r\n        this.createNicknameCache(this.state.value);\r\n      }\r\n\r\n      this.setState({isEditable:null});\r\n    }\r\n  }\r\n\r\n  addToMyList = () => {\r\n\r\n    if(this.state.value in localStorage ){\r\n      alert(this.state.value + \" is exist, use another nickname\")\r\n    }else{\r\n      alert(this.state.value + \" nickname success\")\r\n      var localdata = {\r\n        nickname:this.state.value,\r\n        name:this.state.items.name,\r\n        isMyList:1,\r\n        myListId:null,\r\n      };\r\n      this.createLocalData(JSON.stringify(localdata));\r\n\r\n      var req = {\r\n        isMyList:null,\r\n        id:null,\r\n        nickname:this.state.value\r\n      }\r\n      this.storeData(JSON.stringify(req));\r\n\r\n      this.createNicknameCache(this.state.value);\r\n      this.props.history.push(\"/my_pokemon_list\");\r\n\r\n    }\r\n  }\r\n\r\n  storeData = (req) => {\r\n    const { error, isLoaded, items} = this.state;\r\n    var xdata = JSON.parse(req);\r\n    var date = new Date();\r\n    var setId = date.getDate() + \"\"\r\n                + (date.getMonth()+1) + \"\"\r\n                + date.getFullYear() + \"\"\r\n                + date.getHours() + \"\"\r\n                + date.getMinutes() + \"\"\r\n                + date.getSeconds();\r\n    if(xdata.isMyList == null){\r\n      var vdata = {\r\n        id:setId,\r\n        name:xdata.nickname,\r\n        data:items\r\n      };\r\n      var forId = setId;\r\n    }else{\r\n      var vdata = {\r\n        id:xdata.id,\r\n        name:xdata.nickname,\r\n        data:items\r\n      };\r\n      var forId = xdata.id;\r\n    }\r\n\r\n    set(forId, JSON.stringify(vdata), this.state.dbname)\r\n    .then(() => console.log('It worked!'))\r\n    .catch(err => console.log('It failed!', err));\r\n\r\n\r\n  };\r\n\r\n  deleteData = (status,id,nickname) => {\r\n      //var x = '218362';\r\n      if(status == 0){\r\n        del(id,this.state.dbname)\r\n        localStorage.removeItem(nickname);\r\n        this.props.history.push(\"/my_pokemon_list\");\r\n      }\r\n      if(status==1){\r\n        localStorage.removeItem(nickname);\r\n      }\r\n\r\n  }\r\n\r\n  backData = (status) => {\r\n      if(status == 0){ this.setState({ isDetail:null });}\r\n      if(status == 1){ localStorage.removeItem(\"localdata\");}\r\n  }\r\n\r\n  editable = () => {\r\n    this.setState({isGatcha:1});\r\n    if(this.state.isEditable == null){\r\n      this.setState({isEditable:1});\r\n    }\r\n    if(this.state.isEditable == 1){\r\n      this.setState({isEditable:null});\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    const { error, isLoaded, items, isDetail, isGatcha, isEditable, getLocalData} = this.state;\r\n\r\n    var btnCatch;\r\n    var btnLetItGo;\r\n    var btnAddToMyList;\r\n    var btnRelease;\r\n    var input;\r\n    var info;\r\n\r\n    if(isGatcha == null){\r\n        //btnCatch = <button  onClick={ () => this.catchPokemon()}><div className=\"title-catch\">Catch</div></button>;\r\n        btnCatch = <button  onClick={ () => this.catchPokemon()}><div className=\"title-catch\">Catch</div></button>;\r\n        input = <form className=\"forEdit\">\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Pokemon Name\"\r\n                          value={this.state.value}\r\n                        disabled/>\r\n                  </form>;\r\n    }else{\r\n        btnAddToMyList = <button  onClick={ () => this.addToMyList()}>Add To My List</button>;\r\n        btnLetItGo = <NavLink\r\n                            to={{\r\n                              pathname: \"/\",\r\n                            }}>\r\n                            <div>\r\n                              <button  onClick={ () => this.backData(1)}>Let It Go</button>\r\n                            </div>\r\n                         </NavLink>;\r\n        if(isEditable == null){\r\n          input = <form className=\"forEdit\">\r\n                          <input\r\n                            type=\"text\"\r\n                            placeholder=\"Pokemon Name\"\r\n                            value={this.state.value}\r\n                          disabled/>\r\n                          <button onClick={ () => this.editable()}>Edit</button>\r\n                        </form>;\r\n        }else{\r\n          input = <form className=\"forEdit\" onChange={this.handleChange}>\r\n                        <input\r\n                          className=\"isEditable\"\r\n                          type=\"text\"\r\n                          placeholder=\"Pokemon Name\"\r\n                          value={this.state.value}\r\n                        />\r\n                        <button onClick={ () => this.editable()}>Update</button>\r\n                      </form>;\r\n        }\r\n    }\r\n\r\n    if(getLocalData.isMyList === 1){\r\n      btnCatch = null;\r\n      btnLetItGo= null;\r\n      btnAddToMyList=null;\r\n      btnRelease = <div><button  onClick={ () => this.deleteData(0,getLocalData.myListId,getLocalData.nickname)}><div className=\"title-release\">Release</div></button></div>;\r\n      if(isEditable == null){\r\n        input = <form className=\"forEdit\">\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Pokemon Name\"\r\n                          value={this.state.value}\r\n                        disabled/>\r\n                        <button onClick={ () => this.editable()}>Edit</button>\r\n                      </form>;\r\n      }else{\r\n        input = <form className=\"forEdit\" onChange={this.handleChange} >\r\n                      <input\r\n                        className=\"isEditable\"\r\n                        type=\"text\"\r\n                        placeholder=\"Pokemon Name\"\r\n                        value={this.state.value}\r\n                      />\r\n                      <button onClick={this.handleSubmit}>Update</button>\r\n                    </form>;\r\n      }\r\n    }\r\n\r\n\r\n    if(error){ return( <div className=\"panel-loading\"><div className=\"loading\">Error : {error.message}</div></div>) }\r\n\r\n    else if(!isLoaded){ return( <div className=\"panel-loading\" ><div className=\"loading\">Loading....</div></div> )}\r\n\r\n    else if(isDetail == 1){\r\n      return(\r\n        <div className=\"panel-gotcha\">\r\n          <div className=\"img-gotcha\"></div>\r\n          <button className=\"btn-gotcha\"  onClick={ () => this.backData(0)}>Back</button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    else if(isDetail == 2){\r\n      return(\r\n        <div>\r\n          <div className=\"field-runaway\">\r\n              <div className=\"img-runaway\"></div>\r\n              <div className=\"title-runaway\">Pokemon Run Away</div>\r\n              <NavLink\r\n                to={{\r\n                  pathname: \"/\",\r\n                }}>\r\n                <button className=\"btn-runaway\">back</button>\r\n              </NavLink>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div className=\"panel\">\r\n          <div className=\"col-12\">\r\n            <div className=\"col-12\">\r\n\r\n              <div className=\"btn-catch\">\r\n                <div>{btnCatch}</div>\r\n              </div>\r\n\r\n              <div className=\"btn-release\">\r\n                <div>{btnRelease}</div>\r\n              </div>\r\n\r\n            </div>\r\n            <div className=\"col-4\">\r\n\r\n              <div className=\"image-detail\">\r\n                <div className=\"panel-detail panel-image\">\r\n                  <div>\r\n                    <img src={items.sprites.front_default} alt={\"img-\"+items.name} />\r\n                  </div>\r\n                  <div>\r\n                    {input}\r\n                  </div>\r\n                </div>\r\n                <div className=\"panel-add\">\r\n                  <div className=\"box-add\">{btnLetItGo}</div>\r\n                  <div className=\"box-add\">{btnAddToMyList}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-8\">\r\n              <div className=\"col-6\">\r\n                <div className=\"panel-detail\">\r\n                  <div className=\"title-detail head-green\">Type</div>\r\n                  <div className=\"for-field\">\r\n                  {\r\n                    items.types.length > 0 ? items.types.map((data,i) => {\r\n                      const {type} = data\r\n                      return(\r\n                        <div className=\"field-box\">\r\n                          <div>{type.name}</div>\r\n                        </div>\r\n                      )\r\n                    }):null\r\n                  }\r\n                  </div>\r\n                  <div className=\"title-detail head-blue\">Ability</div>\r\n                  <div className=\"for-field\">\r\n                    {\r\n                      items.abilities.length > 0 ? items.abilities.map((data,i) => {\r\n                        const {ability} = data\r\n                        return(\r\n                          <div className=\"field-box\">\r\n                            <div>{ability.name}</div>\r\n                          </div>\r\n                        )\r\n                      }):null\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <div className=\"panel-detail\">\r\n                  <div className=\"title-detail head-orange\">Move</div>\r\n                  <div className=\"for-field last-field\">\r\n                    {\r\n                      items.moves.length > 0 ? items.moves.map((data,i) => {\r\n                        const {move} = data\r\n                        return(\r\n                          <div className=\"field-box\">\r\n                            <div>{move.name}</div>\r\n                          </div>\r\n                        )\r\n                      }):null\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default PokemonDetails;\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { createStore, values  } from 'idb-keyval';\r\n\r\nclass MyPokemonList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    localStorage.removeItem('localdata');\r\n    var customStore = createStore('my-list-db', 'my-pokemon-list');\r\n    this.state = {\r\n      error:null,\r\n      isLoaded:false,\r\n      items:[],\r\n      customStore:customStore,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n      this.myPokemonList();\r\n  }\r\n\r\n  myPokemonList = () => {\r\n      values(this.state.customStore)\r\n      .then(\r\n        (values) => {\r\n          this.setState({\r\n              isLoaded:true,\r\n              items:values,\r\n          });\r\n        },\r\n        (error)=>{\r\n            this.setState({\r\n                isLoaded:true,\r\n                error\r\n            });\r\n        }\r\n      )\r\n      // .then((values) => console.log(JSON.parse(values[0])));\r\n\r\n  }\r\n\r\n  render (){\r\n    const { error, isLoaded, items } = this.state;\r\n\r\n    if(error){\r\n      return(\r\n        <div>\r\n          <div>Error : {error.message}</div>\r\n        </div>\r\n      )\r\n    }else if(!isLoaded){\r\n      return(\r\n        <div>\r\n          Loading....\r\n        </div>\r\n      )\r\n    }else{\r\n      return(\r\n        <div className=\"panel\">\r\n          <div className=\"col-12\">\r\n            {\r\n              items.length > 0 ? items.map((data,i) => {\r\n                var xdata = JSON.parse(items[i]);\r\n                return(\r\n                  <div key={i+1} className=\"col-2\">\r\n                    <div className=\"box\">\r\n                      <NavLink\r\n                        to={{\r\n                          pathname: \"/pokemon_details\",\r\n                          state: {\r\n                            nickname:xdata.name,\r\n                            name:xdata.data.name,\r\n                            isMyList:1,\r\n                            myListId:xdata.id,}\r\n                        }}>\r\n                        <div>\r\n                          <img src={xdata.data.sprites.front_default} alt={\"img-\"+xdata.name} />\r\n                        </div>\r\n                        <div className=\"list-name\">{xdata.name}</div>\r\n                      </NavLink>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }):null\r\n            }\r\n\r\n\r\n\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default MyPokemonList;\r\n","import React, { Component } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport PokemonDetails from './PokemonDetails';\r\nimport MyPokemonList from './MyPokemonList';\r\nimport { createStore,values  } from 'idb-keyval';\r\n\r\nclass PokemonList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    var customStore = createStore('my-list-db', 'my-pokemon-list');\r\n    this.state = {\r\n      error:null,\r\n      isLoaded:false,\r\n      items:[],\r\n      myList:[],\r\n      customStore:customStore,\r\n    }\r\n    localStorage.removeItem('localdata');\r\n  }\r\n\r\n  getMyPokemon = () => {\r\n      values(this.state.customStore)\r\n      .then(\r\n        (values) => {\r\n          this.setState({\r\n              myList:values,\r\n          });\r\n        },\r\n        (error)=>{\r\n            this.setState({\r\n                isLoaded:true,\r\n                error\r\n            });\r\n        }\r\n      )\r\n      // .then((values) => console.log(JSON.parse(values[0])));\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n      this.fetchData();\r\n  }\r\n\r\n  fetchData = (x) => {\r\n      const gqlQuery = `query pokemons($limit: Int, $offset: Int){\r\n        pokemons(limit: $limit, offset: $offset){\r\n          count\r\n          next\r\n          previous\r\n          status\r\n          message\r\n          results{\r\n            id\r\n            url\r\n            name\r\n            image\r\n          }\r\n        }\r\n      }`;\r\n\r\n      if(x == undefined){\r\n          var y = 24;\r\n\r\n      }else{\r\n          var y = x;\r\n      }\r\n      const gqlVariables = {\r\n        limit: y,\r\n        offset: 0,\r\n      };\r\n\r\n\r\n\r\n      var url = \"https://graphql-pokeapi.vercel.app/api/graphql\";\r\n      var header = {\r\n        credentials: 'omit',\r\n        headers:{ 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: gqlQuery,\r\n          variables: gqlVariables,\r\n        }),\r\n        method: 'POST',\r\n      };\r\n\r\n      fetch(url,header)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n                isLoaded:true,\r\n                items:result.data.pokemons,\r\n                result:result.data.pokemons.results,\r\n                limit:gqlVariables,\r\n            });\r\n          },\r\n          (error)=>{\r\n              this.setState({\r\n                  isLoaded:true,\r\n                  error\r\n              });\r\n          }\r\n        )\r\n\r\n        this.getMyPokemon();\r\n\r\n  }\r\n\r\n  render (){\r\n    const { error, isLoaded, items, result, limit, myList} = this.state;\r\n\r\n    if(error){\r\n      return(\r\n        <div className=\"panel-loading\" ><div className=\"loading\">Error : {error.message}</div></div>\r\n      )\r\n    }else if(!isLoaded){\r\n        return(\r\n          <div className=\"panel-loading\" ><div className=\"loading\">Loading....</div></div>\r\n        )\r\n    }else{\r\n      return(\r\n        <div className=\"panel\">\r\n\r\n          <div className=\"col-12\">\r\n            {\r\n              result.length > 0 ? result.map((data,i) => {\r\n                const {name, image, url, id} = data;\r\n                let count = 0;\r\n                return(\r\n                  <div key={i+1} className=\"col-2\">\r\n                    {myList.length > 0 ? myList.map((data,i) => {\r\n                        var xdata = JSON.parse(myList[i]);\r\n                        if (id === xdata.data.id) count++;\r\n\r\n                    }):null}\r\n                    <div className=\"box\">\r\n                      <NavLink\r\n                        to={{\r\n                          pathname: \"/pokemon_details\",\r\n                          state: {\r\n                            nickname:name,\r\n                            name:name,\r\n                            isMyList:null,\r\n                            myListId:null\r\n                          }\r\n                        }}>\r\n                        <div>\r\n                          <img src={image} alt={\"img-\"+name} />\r\n                        </div>\r\n                        <div className=\"list-name\">{name}</div>\r\n                        <div className=\"div-owned\">owned :  <span>{count}</span></div>\r\n                      </NavLink>\r\n\r\n                    </div>\r\n                  </div>\r\n\r\n                )\r\n\r\n              }):null\r\n            }\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <div className=\"box-load-more\">\r\n              {items.previous === null ? '':<button onClick={ () => this.fetchData(limit.offset - limit.limit)}>Previous</button>}\r\n              {items.offset === 0 ? <button onClick={ () => this.fetchData(0)}>Load More</button>:<button onClick={ () => this.fetchData(limit.limit + 12)}>Load More</button>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default PokemonList;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Navigation extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"custom-header\">\r\n        <div className=\"custom-menu\">\r\n          <div>\r\n            <div>\r\n              <NavLink to='/'>\r\n              <div><div className=\"img-pokedex\"></div></div>\r\n              <div className=\"title-navigation\">Pokemon List</div>\r\n              </NavLink>\r\n            </div>\r\n            <div>\r\n              <NavLink to='/my_pokemon_list'>\r\n                <div><div className=\"img-pokebag\"></div></div>\r\n                <div className=\"title-navigation\">My Pokemon List</div>\r\n              </NavLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Navigation;\r\n","\nimport React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport PokemonList from './components/PokemonList';\nimport MyPokemonList from './components/MyPokemonList';\nimport PokemonDetails from './components/PokemonDetails';\nimport Navigation from './components/Navigation';\n\nconst routerBaseName = process.env.PUBLIC_URL;\n\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n      super(props);\n\n  }\n\n  clickBody = () => {\n      const nav = document.getElementById(\"navigator\");\n  }\n\n  render(){\n    return(\n      <HashRouter>\n        <div>\n          <Navigation />\n          <div onClick={this.clickBody}>\n            <Switch>\n              <Route path='/' component={PokemonList} exact/>\n              <Route path='/my_pokemon_list' component={MyPokemonList} />\n              <Route path='/pokemon_details' component={PokemonDetails} />\n            </Switch>\n          </div>\n        </div>\n      </HashRouter>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport './assets/font/font-awesome/css/font-awesome.css';\nimport './assets/font/fontStyle.css';\nimport './assets/css/custom.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}